// You'll need to replace this with your actual eBay API key
const EBAY_APP_ID = 'YOUR-EBAY-APP-ID';

// List of positive search terms for eBay
const POSITIVE_SEARCHES = [
    'vintage collectibles',
    'handmade crafts',
    'rare books',
    'antique treasures',
    'art prints',
    'unique gifts',
    'classic toys',
    'retro games',
    'vinyl records',
    'hobby supplies'
];

// Sample eBay-like listings
const SAMPLE_LISTINGS = [
    {
        title: "Vintage Star Wars Action Figure Collection",
        price: "49.99",
        currency: "USD",
        image: "https://i.imgur.com/QkIa5tX.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=vintage+star+wars+figures"
    },
    {
        title: "Handcrafted Leather Journal",
        price: "29.99",
        currency: "USD",
        image: "https://i.imgur.com/jbn2H8F.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=leather+journal"
    },
    {
        title: "Retro Nintendo GameBoy",
        price: "89.99",
        currency: "USD",
        image: "https://i.imgur.com/Dx96fer.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=original+gameboy"
    },
    {
        title: "Vintage Vinyl Record Collection",
        price: "79.99",
        currency: "USD",
        image: "https://i.imgur.com/2dqTjXx.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=vinyl+records+lot"
    },
    {
        title: "Antique Brass Compass",
        price: "34.99",
        currency: "USD",
        image: "https://i.imgur.com/kpGLdJU.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=antique+brass+compass"
    },
    {
        title: "Classic Comic Book Collection",
        price: "99.99",
        currency: "USD",
        image: "https://i.imgur.com/qLd7gJQ.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=classic+comic+books"
    },
    {
        title: "Vintage Camera Collection",
        price: "149.99",
        currency: "USD",
        image: "https://i.imgur.com/dJzuXCt.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=vintage+camera"
    },
    {
        title: "Handmade Pottery Set",
        price: "59.99",
        currency: "USD",
        image: "https://i.imgur.com/R7ugXOP.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=handmade+pottery+set"
    },
    {
        title: "Rare Stamp Collection",
        price: "199.99",
        currency: "USD",
        image: "https://i.imgur.com/8N1VR3m.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=rare+stamps"
    },
    {
        title: "Model Train Set",
        price: "129.99",
        currency: "USD",
        image: "https://i.imgur.com/YQ2O8NG.jpeg",
        link: "https://www.ebay.com/sch/i.html?_nkw=model+train+set"
    }
];

// Default keywords that will be installed with the extension
const DEFAULT_KEYWORDS = [
    'war', 'death', 'died', 'killed', 'murder', 'tragic', 'crisis', 'disaster', 
    'crash', 'dead', 'fatal', 'victim', 'terror', 'attack', 'shooting', 'killed',
    'accident', 'suicide', 'bomb', 'catastrophe', 'emergency', 'violence'
];

// Handle extension installation
chrome.runtime.onInstalled.addListener((details) => {
    if (details.reason === 'install') {
        // Set default keywords on installation
        chrome.storage.sync.set({ blockedKeywords: DEFAULT_KEYWORDS }, () => {
            console.log('Default keywords installed:', DEFAULT_KEYWORDS);
        });
    }
});

// Function to fetch blog posts from RSS feed
async function fetchBlogPosts() {
    try {
        // Use allorigins.win as CORS proxy
        const response = await fetch('https://api.allorigins.win/get?url=' + encodeURIComponent('https://blog.supermarketwizard.com/feed/'));
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        if (!data.contents) {
            throw new Error('No content received from proxy');
        }

        // Create a parser with error handling
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(data.contents, 'text/xml');

        // Check for parsing errors
        const parserError = xmlDoc.querySelector('parsererror');
        if (parserError) {
            throw new Error('XML parsing error: ' + parserError.textContent);
        }

        // Get all item elements
        const items = xmlDoc.getElementsByTagName('item');
        if (!items || items.length === 0) {
            throw new Error('No items found in feed');
        }

        // Convert items to array of blog posts
        const posts = Array.from(items).map(item => {
            const title = item.querySelector('title')?.textContent || 'Untitled Post';
            const description = item.querySelector('description')?.textContent || 'No description available';
            
            // Try to get an image from the content
            let image = 'https://images.unsplash.com/photo-1516383740770-fbcc5ccbece0?w=300'; // Default image
            const content = item.querySelector('content\\:encoded, encoded')?.textContent || '';
            const imgMatch = content.match(/<img[^>]+src="([^">]+)"/);
            if (imgMatch && imgMatch[1]) {
                image = imgMatch[1];
            }

            return { title, description, image };
        });

        return posts;
    } catch (error) {
        console.error('Error fetching blog posts:', error);
        return null;
    }
}

// Listen for messages from content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'getBlogPost') {
        fetchBlogPosts()
            .then(posts => {
                if (posts && posts.length > 0) {
                    // Return a random post from the fetched posts
                    const randomPost = posts[Math.floor(Math.random() * posts.length)];
                    sendResponse({ success: true, post: randomPost });
                } else {
                    // If no posts are available, return null to trigger fallback content
                    sendResponse({ success: false, error: 'No posts available' });
                }
            })
            .catch(error => {
                console.error('Error in getBlogPost:', error);
                sendResponse({ success: false, error: error.message });
            });
        return true; // Required for async response
    }
});

// Helper function to escape XML special characters
function escapeXml(unsafe) {
    return unsafe.replace(/[<>&'"]/g, c => {
        switch (c) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            case '\'': return '&apos;';
            case '"': return '&quot;';
        }
    });
}
